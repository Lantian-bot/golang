package rob

//打家劫舍
//你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
// 给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
// 这道题可以使用动态规划的思想，通过 for 循环遍历数组，利用 if 条件判断来决定是否选择当前房屋进行抢劫，状态转移方程为 dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
/*
示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
提示：
	1 <= nums.length <= 100
	0 <= nums[i] <= 400
*/

func Rob(nums []int) int {
	if len(nums) == 0 {
		return 0
	}
	if len(nums) == 1 {
		return nums[0]
	}

	// 初始化前两个状态
	prev := nums[0]
	curr := max(nums[0], nums[1])

	// 从第三个房屋开始动态规划
	for i := 2; i < len(nums); i++ {
		// 计算当前最大值：选择偷当前房屋（prev + nums[i]）或不偷（curr）
		temp := curr
		curr = max(curr, prev+nums[i])
		prev = temp // 更新前一个状态为旧的当前最大值
	}
	return curr
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
